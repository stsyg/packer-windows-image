# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.



locals {

}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "azure-arm" "this" {
  build_resource_group_name              = "${azurerm_resource_group.packer_build.name}"
  client_id                              = "${azuread_service_principal_password.this.value}"
  client_secret                          = "${azuread_service_principal_password.this.value}"
  communicator                           = "winrm"
  image_offer                            = "${var.image_details.offer}"
  image_publisher                        = "${var.image_details.publisher}"
  image_sku                              = "${var.image_details.sku}"
  image_version                          = "${var.image_version}"
  keep_os_disk                           = "false"
  managed_image_name                     = "${azurerm_shared_image.this.name}"
  managed_image_resource_group_name      = "${azurerm_resource_group.packer_build.name}"
  os_disk_size_gb                        = "127"
  os_type                                = "Windows"
#  private_virtual_network_with_public_ip = "${var.private_virtual_network_with_public_ip}"
  shared_image_gallery_destination {
    gallery_name         = "${azurerm_shared_image_gallery.this.name}"
    image_name           = "${azurerm_shared_image.this.name}"
    image_version        = "${var.shared_image_version}"
    replication_regions  = "${var.replication_regions}"
    resource_group       = "${azurerm_resource_group.packer_sig.name}"
    storage_account_type = "Standard_LRS"
    subscription         = "${data.azurerm_subscription.this.subscription_id}"
  }
  subscription_id                     = "${data.azurerm_subscription.this.subscription_id}"
  tenant_id                           = "${data.azurerm_subscription.this.tenant_id}"
#  virtual_network_name                = "${var.virtual_network_name}"
#  virtual_network_resource_group_name = "${var.virtual_network_resource_group_name}"
#  virtual_network_subnet_name         = "${var.virtual_network_subnet_name}"
  vm_size                             = "${var.vm_size}"
  winrm_insecure                      = "true"
  winrm_timeout                       = "5m"
  winrm_use_ssl                       = "true"
  winrm_username                      = "packer"
#  custom_data                         = "${var.custom_data}"
  user_assigned_managed_identities    = "${var.user_assigned_managed_identities}"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.azure-arm.this"]

  # Install Chocolatey: https://chocolatey.org/install#individual
  provisioner "powershell" {
    inline = ["Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"]
  }

  # Install Chocolatey packages
  provisioner "file" {
    source      = "./packages.config"
    destination = "D:/packages.config"
  }

  provisioner "powershell" {
    inline = ["choco install --confirm D:/packages.config"]
    # See https://docs.chocolatey.org/en-us/choco/commands/install#exit-codes
    valid_exit_codes = [0, 3010]
  }

  provisioner "windows-restart" {}

  # Azure PowerShell Modules
  provisioner "powershell" {
    script = "./install-azure-powershell.ps1"
  }

  # Generalize image using Sysprep
  # See https://www.packer.io/docs/builders/azure/arm#windows
  # See https://docs.microsoft.com/en-us/azure/virtual-machines/windows/build-image-with-packer#define-packer-template
  provisioner "powershell" {
    inline = [
      "while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
      "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
      "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
      "while ($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
    ]
  }
}

 